# -*- coding: utf-8 -*-
"""
#########################################################
# Media Management Tools (MMT) - Radarr Unmonitor
# Auteur       : Nexius2
# Date         : 2025-02-18
# Version      : 1.2.1
# Description  : Script permettant de d√©sactiver le monitoring
#                des films dans Radarr en fonction des crit√®res
#                d√©finis dans `config.json`.
# Licence      : MIT
#########################################################

üõ† Radarr Unmonitor - D√©sactivation automatique des films dans Radarr

=============================================================
üìå DESCRIPTION
-------------------------------------------------------------
Radarr Unmonitor est un script Python permettant de **d√©sactiver le monitoring**
des films dans Radarr en fonction de crit√®res d√©finis dans `config.json`.
Il est utile pour √©viter que des films d√©j√† r√©cup√©r√©s soient t√©l√©charg√©s √† nouveau.

üìÇ Fonctionnalit√©s :
- Analyse la liste des films **monitor√©s** et **t√©l√©charg√©s**.
- V√©rifie si le **nom du fichier** correspond aux crit√®res de d√©sactivation.
- D√©sactive automatiquement le monitoring des films correspondants.
- **Mode simulation (DRY_RUN)** pour tester sans effectuer de modifications.
- **Logs d√©taill√©s** des films trait√©s et des erreurs √©ventuelles.

=============================================================
üìú FONCTIONNEMENT
-------------------------------------------------------------
1. **Connexion √† Radarr** via son API.
2. **R√©cup√©ration de la liste des films monitor√©s** et qui ont un fichier.
3. **V√©rification du nom du fichier** pour voir s'il correspond aux crit√®res d√©finis.
4. **D√©sactivation du monitoring** pour les films correspondants.
5. **Gestion du mode simulation** (`dry_run` activ√©/d√©sactiv√©).
6. **Gestion avanc√©e des erreurs et des logs**.

=============================================================
‚öôÔ∏è CONFIGURATION (config.json)
-------------------------------------------------------------
Le script utilise un fichier de configuration JSON contenant les param√®tres suivants :

{
    "services": {
        "radarr": {
            "url": "http://192.168.1.100:7878",
            "api_key": "VOTRE_CLE_API_RADARR"
        }
    },
    "radarr_unmonitor": {
        "log_file": "radarr_unmonitor.log",
        "log_level": "INFO",
        "dry_run": true,
        "search_terms": [
            ["1080", "FR", "MULTI"],
            ["4K", "FR", "MULTI"]
        ]
    }
}

| Cl√©                          | Description |
|------------------------------|-------------|
| `services.radarr.url`        | URL de l'instance Radarr |
| `services.radarr.api_key`    | Cl√© API pour Radarr |
| `radarr_unmonitor.log_file`  | Nom du fichier de log |
| `radarr_unmonitor.log_level` | Niveau de logs (`DEBUG`, `INFO`, `WARNING`, `ERROR`) |
| `radarr_unmonitor.dry_run`   | `true` = simulation, `false` = modifications r√©elles |
| `radarr_unmonitor.search_terms` | Liste des groupes de crit√®res pour la d√©sactivation |

üìå **Crit√®res de d√©sactivation (`search_terms`)**
- Chaque groupe de termes doit √™tre **pr√©sent simultan√©ment** dans le nom du fichier.
- Exemple :
  - `["1080", "FR", "MULTI"]` ‚ûù D√©sactive si les trois termes sont pr√©sents.
  - `["4K", "FR", "MULTI"]` ‚ûù D√©sactive si ces trois termes sont pr√©sents.

=============================================================
üöÄ UTILISATION
-------------------------------------------------------------
1. **Installez les d√©pendances requises** :
   pip install requests

2. **Cr√©ez/modifiez le fichier `config.json`** avec vos param√®tres.

3. **Lancez le script en mode simulation (DRY_RUN activ√©)** :
   python radarr_unmonitor.py
   - Aucun film ne sera d√©sactiv√©, mais le script affichera ceux qui le seraient.

4. **Ex√©cutez le script avec modifications r√©elles** (apr√®s avoir mis `dry_run` sur `false` dans `config.json`) :
   python radarr_unmonitor.py
   - Les films correspondant aux crit√®res seront r√©ellement d√©sactiv√©s.

=============================================================
üìÑ LOGS ET DEBUG
-------------------------------------------------------------
Le script g√©n√®re des logs d√©taill√©s :
- Les logs sont enregistr√©s dans le fichier sp√©cifi√© (`radarr_unmonitor.log`).
- En mode `DEBUG`, toutes les analyses et modifications sont enregistr√©es.
- Les erreurs de connexion ou de requ√™te API sont √©galement logu√©es.

=============================================================
üõë PR√âCAUTIONS
-------------------------------------------------------------
- **Aucun fichier n'est supprim√©**, seule la surveillance est d√©sactiv√©e.
- **Le monitoring peut √™tre r√©activ√©** manuellement dans Radarr si n√©cessaire.
- **V√©rifiez les logs avant de d√©sactiver `dry_run`**, pour √©viter des d√©sactivations ind√©sirables.

=============================================================
üî• EXEMPLE D'EX√âCUTION EN MODE `DRY_RUN`
-------------------------------------------------------------
python radarr_unmonitor.py

üìù **Exemple de sortie :**
üöÄ D√©but du traitement des films dans Radarr...
üì• 1500 films r√©cup√©r√©s depuis Radarr.
‚úÖ 1200 films monitor√©s et t√©l√©charg√©s.
üìã 50 films d√©tect√©s correspondant aux crit√®res de d√©sactivation.
üîß Mode DRY RUN activ√©. Aucun film ne sera modifi√©.

=============================================================
üóë EXEMPLE D'EX√âCUTION AVEC MODIFICATIONS EFFECTIVES
-------------------------------------------------------------
Apr√®s avoir mis `dry_run` sur `false` dans `config.json` :

python radarr_unmonitor.py

üìù **Exemple de sortie :**
üöÄ D√©but du traitement des films dans Radarr...
üì• 1500 films r√©cup√©r√©s depuis Radarr.
‚úÖ 1200 films monitor√©s et t√©l√©charg√©s.
üìã 50 films d√©tect√©s correspondant aux crit√®res de d√©sactivation.
üìù Film "Inception (2010)" marqu√© comme NON MONITOR√â.
üìù Film "Avatar (2009)" marqu√© comme NON MONITOR√â.
‚úÖ Fin du traitement. 50 films ont √©t√© d√©sactiv√©s.

=============================================================
üí° ASTUCE
-------------------------------------------------------------
Vous pouvez programmer l'ex√©cution automatique de ce script 
via un **cron job** ou une **t√¢che planifi√©e Windows**.

"""



import requests
import json
import logging
from logging.handlers import RotatingFileHandler
import time
import re


# Charger la configuration
CONFIG_FILE = "config.json"

try:
    with open(CONFIG_FILE, "r", encoding="utf-8") as f:
        config = json.load(f)
except FileNotFoundError:
    print(f"‚ùå Erreur : fichier de configuration '{CONFIG_FILE}' introuvable.")
    exit(1)

# Extraire la configuration des services
RADARR_CONFIG = config["services"].get("radarr", {})

# Extraire la configuration sp√©cifique √† Radarr Unmonitor
UNMONITOR_CONFIG = config.get("radarr_unmonitor", {})

LOG_FILE = UNMONITOR_CONFIG.get("log_file", "radarr_unmonitor.log")
LOG_LEVEL = UNMONITOR_CONFIG.get("log_level", "INFO").upper()
DRY_RUN = UNMONITOR_CONFIG.get("dry_run", True)
SEARCH_TERMS = UNMONITOR_CONFIG.get("search_terms", ["1080", "FR", "MULTI"])


# V√©rifier la configuration Radarr
RADARR_URL = RADARR_CONFIG.get("url")
RADARR_API_KEY = RADARR_CONFIG.get("api_key")

if not RADARR_URL or not RADARR_API_KEY:
    print("‚ùå Configuration Radarr manquante ou incompl√®te dans 'config.json'.")
    exit(1)

# Initialisation du logging
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL, logging.INFO),
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# Configuration du syst√®me de logs avec rotation
LOG_FILE = UNMONITOR_CONFIG.get("log_file", "radarr_unmonitor.log")
LOG_LEVEL = UNMONITOR_CONFIG.get("log_level", "INFO").upper()

# Cr√©ation du gestionnaire de logs avec rotation
log_formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")

file_handler = RotatingFileHandler(
    LOG_FILE, maxBytes=5 * 1024 * 1024, backupCount=5, encoding="utf-8"
)  # 5 MB par fichier, 5 backups max
file_handler.setFormatter(log_formatter)

console_handler = logging.StreamHandler()
console_handler.setFormatter(log_formatter)

logger = logging.getLogger()
logger.setLevel(getattr(logging, LOG_LEVEL, logging.INFO))
logger.handlers = []  # Supprime tous les handlers existants pour √©viter les doublons
logger.addHandler(file_handler)
logger.addHandler(console_handler)

logging.info("üìù Syst√®me de logs avec rotation activ√©.")


HEADERS = {"X-Api-Key": RADARR_API_KEY, "Content-Type": "application/json"}

def get_movies():
    """ R√©cup√®re la liste des films dans Radarr et ne garde que ceux avec un fichier et monitor√©s """
    url = f"{RADARR_URL}/api/v3/movie"
    response = requests.get(url, headers=HEADERS)

    if response.status_code == 200:
        movies = response.json()
        logging.info(f"üì• {len(movies)} films r√©cup√©r√©s depuis Radarr.")

        # Filtrage pour ne garder que les films monitor√©s et avec un fichier
        filtered_movies = [
            movie for movie in movies
            if movie.get("monitored", False) and movie.get("movieFile", {}).get("relativePath")
        ]

        logging.info(f"‚úÖ {len(filtered_movies)} films s√©lectionn√©s apr√®s filtrage (monitor√©s et avec un fichier).")
        return filtered_movies
    else:
        logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des films : {response.status_code} - {response.text}")
        return []



def should_unmonitor(movie):
    """ V√©rifie si un film doit √™tre d√©sactiv√© en fonction du nom du fichier """
    title = movie.get("title", "Titre inconnu")
    year = movie.get("year", "Ann√©e inconnue")
    movie_id = movie.get("id")

    # Nom du fichier en minuscule
    relative_path = movie["movieFile"]["relativePath"].lower()

    logging.debug(f"üîç Analyse du film : {title} ({year}, ID: {movie_id}) - Fichier d√©tect√© : {relative_path}")
    #logging.debug(f"üö´ {title} ({year}) n'a pas √©t√© d√©sactiv√© car aucun des groupes suivants ne correspondait : {SEARCH_TERMS}")


    # V√©rification des termes avec une expression r√©guli√®re am√©lior√©e
    def match_criteria(term):
        """
        V√©rifie si un terme est pr√©sent dans le nom du fichier en tant que mot distinct.
        - Autorise des variantes comme "1080p" en plus de "1080".
        """
        if term.isdigit():  # Si le terme est un nombre (ex: 1080, 4K)
            pattern = rf"(?:^|[\[\]\+\-&\s\._,]){re.escape(term)}(?:p|i|$|[\[\]\+\-&\s\._,])"
        else:
            pattern = rf"(?:^|[\[\]\+\-&\s\._,]){re.escape(term.lower())}(?:$|[\[\]\+\-&\s\._,])"


        match = re.search(pattern, relative_path)
        if match:
            logging.debug(f"‚úÖ Terme '{term}' trouv√© dans '{relative_path}'")
        else:
            logging.debug(f"‚ùå Terme '{term}' NON trouv√© dans '{relative_path}'")
        return bool(match)




    # V√©rifier si un groupe de crit√®res correspond
    for search_group in SEARCH_TERMS:
        if isinstance(search_group, list) and all(match_criteria(term) for term in search_group):

#    for search_group in SEARCH_TERMS:
#        if all(match_criteria(term) for term in search_group):
            logging.info(f"üéØ Film d√©tect√© : {title} ({year}, ID: {movie_id}) - Fichier: {relative_path} - Correspondance: {search_group}")
            return True

    logging.debug(f"üö´ Le film '{title}' ({year}, ID: {movie_id}) ne correspond √† aucun crit√®re de d√©sactivation.")
    return False






def unmonitor_movie(movie, dry_run_list):
    """ D√©sactive le monitoring d'un film dans Radarr et stocke les films trait√©s en mode DRY_RUN """
    movie_id = movie["id"]
    title = movie.get("title", "Titre inconnu")
    year = movie.get("year", "Ann√©e inconnue")

    logging.info(f"üõ†Ô∏è Traitement du film '{title}' ({year}, ID: {movie_id})...")

    if DRY_RUN:
        logging.info(f"[DRY_RUN] üöÄ Film '{title}' ({year}, ID: {movie_id}) aurait √©t√© marqu√© comme NON MONITOR√â ‚úÖ")
        dry_run_list.append(f"{title} ({year}, ID: {movie_id})")
        return

    url = f"{RADARR_URL}/api/v3/movie/{movie_id}"
    movie["monitored"] = False  # D√©sactiver le monitoring

    max_retries = 5  # Nombre de tentatives en cas d'√©chec
    for attempt in range(max_retries):
        response = requests.put(url, headers=HEADERS, json=movie)

        if response.status_code == 200:
            logging.info(f"‚úÖ Film '{title}' ({year}, ID: {movie_id}) marqu√© comme NON MONITOR√â avec succ√®s.")
            break
        elif response.status_code == 202:
            logging.warning(f"‚ö†Ô∏è Radarr est lent √† traiter '{title}' ({year}, ID: {movie_id}). V√©rification apr√®s 3 secondes...")
            time.sleep(3)  # Pause courte avant v√©rification

            # V√©rifier si le film a bien √©t√© mis √† jour
            check_response = requests.get(url, headers=HEADERS)
            if check_response.status_code == 200:
                updated_movie = check_response.json()
                if not updated_movie.get("monitored", True):  # Si monitored est bien pass√© √† False
                    logging.info(f"‚úÖ V√©rification OK : Film '{title}' ({year}, ID: {movie_id}) est bien NON MONITOR√â apr√®s attente.")
                    break
            else:
                logging.warning(f"‚ö†Ô∏è Impossible de v√©rifier l'√©tat de '{title}' ({year}, ID: {movie_id}) apr√®s mise √† jour.")
        else:
            logging.error(f"‚ùå Erreur mise √† jour film {movie_id}: {response.status_code} - {response.text}")
            break

    # Pause courte pour √©viter un trop grand nombre de requ√™tes simultan√©es
    time.sleep(1)





def main():
    logging.info("üöÄ D√©but du traitement des films dans Radarr...")

    movies = get_movies()
    if not movies:
        logging.warning("‚ö†Ô∏è Aucun film trouv√© dans Radarr.")
        return

    total_processed = 0
    dry_run_list = []  # Liste pour stocker les films trait√©s en mode DRY_RUN

    for movie in movies:
        if should_unmonitor(movie):
            unmonitor_movie(movie, dry_run_list)
            total_processed += 1

    if DRY_RUN and dry_run_list:
        logging.info(f"[DRY_RUN] üìã Films qui auraient √©t√© d√©sactiv√©s ({len(dry_run_list)}):")
        for film in dry_run_list:
            logging.info(f"  - {film}")

    logging.info(f"‚úÖ Fin du traitement. {total_processed} films ont √©t√© d√©sactiv√©s.")



if __name__ == "__main__":
    main()
