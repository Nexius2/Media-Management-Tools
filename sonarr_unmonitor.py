# -*- coding: utf-8 -*-

"""
#########################################################
# Media Management Tools (MMT) - Sonarr Unmonitor
# Auteur       : Nexius2
# Version      : 4.4.2.1
# Description  : Script permettant de d√©sactiver le monitoring
#                des √©pisodes dans Sonarr en fonction des crit√®res
#                d√©finis dans `config.json`.
# Licence      : MIT
#########################################################

üõ† Sonarr Unmonitor - D√©sactivation automatique des √©pisodes dans Sonarr

=============================================================
üìå DESCRIPTION
-------------------------------------------------------------
Sonarr Unmonitor est un script Python permettant de **d√©sactiver le monitoring**
des √©pisodes dans Sonarr en fonction des crit√®res d√©finis dans `config.json`.
Il permet d'√©viter que des √©pisodes d√©j√† r√©cup√©r√©s soient √† nouveau t√©l√©charg√©s.

üìÇ Fonctionnalit√©s :
- Analyse les s√©ries et leurs **√©pisodes monitor√©s avec un fichier**.
- V√©rifie si le **nom du fichier** correspond aux crit√®res de d√©sactivation.
- D√©sactive automatiquement le monitoring des √©pisodes concern√©s.
- **Mode simulation (DRY_RUN)** pour tester sans effectuer de modifications.
- **Logs d√©taill√©s** des √©pisodes trait√©s et des erreurs √©ventuelles.

=============================================================
üìú FONCTIONNEMENT
-------------------------------------------------------------
1. **Connexion √† Sonarr** via son API.
2. **R√©cup√©ration de la liste des s√©ries et √©pisodes monitor√©s** ayant un fichier.
3. **Analyse du nom du fichier** et comparaison avec les crit√®res d√©finis.
4. **D√©sactivation du monitoring** pour les √©pisodes correspondants.
5. **Gestion du mode simulation** (`dry_run` activ√©/d√©sactiv√©).
6. **Gestion avanc√©e des erreurs et des logs**.

=============================================================
‚öôÔ∏è CONFIGURATION (config.json)
-------------------------------------------------------------
Le script utilise un fichier de configuration JSON contenant les param√®tres suivants :

{
    "services": {
        "sonarr": {
            "url": "http://192.168.1.100:8989",
            "api_key": "VOTRE_CLE_API_SONARR"
        }
    },
    "sonarr_unmonitor": {
        "log_file": "sonarr_unmonitor.log",
        "log_level": "INFO",
        "dry_run": true,
        "search_terms": [
            ["1080", "FR", "MULTI"],
            ["4K", "FR", "MULTI"]
        ]
    }
}

| Cl√©                           | Description |
|--------------------------------|-------------|
| `services.sonarr.url`         | URL de l'instance Sonarr |
| `services.sonarr.api_key`     | Cl√© API pour Sonarr |
| `sonarr_unmonitor.log_file`   | Nom du fichier de log |
| `sonarr_unmonitor.log_level`  | Niveau de logs (`DEBUG`, `INFO`, `WARNING`, `ERROR`) |
| `sonarr_unmonitor.dry_run`    | `true` = simulation, `false` = modifications r√©elles |
| `sonarr_unmonitor.search_terms` | Liste des groupes de crit√®res pour la d√©sactivation |

üìå **Crit√®res de d√©sactivation (`search_terms`)**
- Chaque groupe de termes doit √™tre **pr√©sent simultan√©ment** dans le nom du fichier.
- Exemple :
  - `["1080", "FR", "MULTI"]` ‚ûù D√©sactive si les trois termes sont pr√©sents.
  - `["4K", "FR", "MULTI"]` ‚ûù D√©sactive si ces trois termes sont pr√©sents.

=============================================================
üöÄ UTILISATION
-------------------------------------------------------------
1. **Installez les d√©pendances requises** :
   pip install requests

2. **Cr√©ez/modifiez le fichier `config.json`** avec vos param√®tres.

3. **Lancez le script en mode simulation (DRY_RUN activ√©)** :
   python sonarr_unmonitor.py
   - Aucun √©pisode ne sera d√©sactiv√©, mais le script affichera ceux qui le seraient.

4. **Ex√©cutez le script avec modifications r√©elles** (apr√®s avoir mis `dry_run` sur `false` dans `config.json`) :
   python sonarr_unmonitor.py
   - Les √©pisodes correspondant aux crit√®res seront r√©ellement d√©sactiv√©s.

=============================================================
üìÑ LOGS ET DEBUG
-------------------------------------------------------------
Le script g√©n√®re des logs d√©taill√©s :
- Les logs sont enregistr√©s dans le fichier sp√©cifi√© (`sonarr_unmonitor.log`).
- En mode `DEBUG`, toutes les analyses et modifications sont enregistr√©es.
- Les erreurs de connexion ou de requ√™te API sont √©galement logu√©es.

=============================================================
üõë PR√âCAUTIONS
-------------------------------------------------------------
- **Aucun fichier n'est supprim√©**, seule la surveillance est d√©sactiv√©e.
- **Le monitoring peut √™tre r√©activ√©** manuellement dans Sonarr si n√©cessaire.
- **V√©rifiez les logs avant de d√©sactiver `dry_run`**, pour √©viter des d√©sactivations ind√©sirables.

=============================================================
üî• EXEMPLE D'EX√âCUTION EN MODE `DRY_RUN`
-------------------------------------------------------------
python sonarr_unmonitor.py

üìù **Exemple de sortie :**
üöÄ D√©but du traitement des s√©ries dans Sonarr...
üì• 500 s√©ries r√©cup√©r√©es depuis Sonarr.
‚úÖ 480 s√©ries avec √©pisodes monitor√©s et t√©l√©charg√©s.
üìã 25 √©pisodes d√©tect√©s correspondant aux crit√®res de d√©sactivation.
üîß Mode DRY RUN activ√©. Aucun √©pisode ne sera modifi√©.

=============================================================
üóë EXEMPLE D'EX√âCUTION AVEC MODIFICATIONS EFFECTIVES
-------------------------------------------------------------
Apr√®s avoir mis `dry_run` sur `false` dans `config.json` :

python sonarr_unmonitor.py

üìù **Exemple de sortie :**
üöÄ D√©but du traitement des s√©ries dans Sonarr...
üì• 500 s√©ries r√©cup√©r√©es depuis Sonarr.
‚úÖ 480 s√©ries avec √©pisodes monitor√©s et t√©l√©charg√©s.
üìã 25 √©pisodes d√©tect√©s correspondant aux crit√®res de d√©sactivation.
üìù √âpisode "Breaking Bad S02E05" marqu√© comme NON MONITOR√â.
üìù √âpisode "Game of Thrones S04E03" marqu√© comme NON MONITOR√â.
‚úÖ Fin du traitement. 25 √©pisodes ont √©t√© d√©sactiv√©s.

=============================================================
üí° ASTUCE
-------------------------------------------------------------
Vous pouvez programmer l'ex√©cution automatique de ce script 
via un **cron job** ou une **t√¢che planifi√©e Windows**.

"""


import requests
import json
import logging
from logging.handlers import RotatingFileHandler
import re
import time

# Charger la configuration
CONFIG_FILE = "config.json"

try:
    with open(CONFIG_FILE, "r", encoding="utf-8") as f:
        config = json.load(f)
except FileNotFoundError:
    print(f"‚ùå Erreur : fichier de configuration '{CONFIG_FILE}' introuvable.")
    exit(1)

SONARR_CONFIG = config["services"].get("sonarr", {})
UNMONITOR_CONFIG = config.get("sonarr_unmonitor", {})

LOG_FILE = UNMONITOR_CONFIG.get("log_file", "sonarr_unmonitor.log")
LOG_LEVEL = UNMONITOR_CONFIG.get("log_level", "INFO").upper()
DRY_RUN = UNMONITOR_CONFIG.get("dry_run", True)
SEARCH_TERMS = UNMONITOR_CONFIG.get("search_terms", ["1080", "FR", "MULTI"])

SONARR_URL = SONARR_CONFIG.get("url")
SONARR_API_KEY = SONARR_CONFIG.get("api_key")

if not SONARR_URL or not SONARR_API_KEY:
    print("‚ùå Configuration Sonarr manquante ou incompl√®te dans 'config.json'.")
    exit(1)

# Initialisation du logging
log_formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
file_handler = RotatingFileHandler(LOG_FILE, maxBytes=5 * 1024 * 1024, backupCount=5, encoding="utf-8")
file_handler.setFormatter(log_formatter)
console_handler = logging.StreamHandler()
console_handler.setFormatter(log_formatter)
logger = logging.getLogger()
logger.setLevel(getattr(logging, LOG_LEVEL, logging.DEBUG))
logger.handlers = []
logger.addHandler(file_handler)
logger.addHandler(console_handler)

logging.info("üìù Syst√®me de logs activ√©.")

HEADERS = {"X-Api-Key": SONARR_API_KEY, "Content-Type": "application/json"}

def clean_filename(filename):
    """ Nettoie et normalise le nom du fichier pour am√©liorer la correspondance """
    filename = filename.lower()
    filename = filename.replace("1080p", "1080").replace("2160p", "4k")
    filename = re.sub(r"[\(\)\-_.]", " ", filename)  # Supprime tirets, underscores, points
    filename = re.sub(r"\s+", " ", filename).strip()  # Supprime les espaces multiples
    return filename

def get_episodes(series_id):
    """ R√©cup√®re les √©pisodes pour une s√©rie sp√©cifique """
    episodes_url = f"{SONARR_URL}/api/v3/episode?seriesId={series_id}&includeEpisodeFile=true"
    response = requests.get(episodes_url, headers=HEADERS)
    
    if response.status_code != 200:
        logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des √©pisodes pour la s√©rie {series_id}: {response.status_code}")
        return []
    
    episodes = response.json()
    logging.info(f"üìå {len(episodes)} √©pisodes r√©cup√©r√©s pour la s√©rie {series_id}")
    return episodes

def should_unmonitor(episode):
    """ V√©rifie si un √©pisode doit √™tre marqu√© en 'unmonitored' """
    filename = episode.get("episodeFile", {}).get("relativePath", "")
    if not filename:
        logging.debug(f"üö´ Aucun fichier associ√© √† l'√©pisode {episode['id']}")
        return False

    normalized_filename = clean_filename(filename)
    logging.debug(f"üîç V√©rification des crit√®res pour : {normalized_filename}")

    # Fonction de v√©rification des termes avec une regex am√©lior√©e
    def match_criteria(term):
        """
        V√©rifie si un terme est pr√©sent dans le nom du fichier en tant que mot distinct.
        - Autorise des variantes comme "1080p" en plus de "1080".
        """
        if term.isdigit():  # Si le terme est un nombre (ex: 1080, 4K)
            pattern = rf"(?:^|[\[\]\+\-&\s\._,]){re.escape(term)}(?:p|i|$|[\[\]\+\-&\s\._,])"
        else:
            pattern = rf"(?:^|[\[\]\+\-&\s\._,]){re.escape(term.lower())}(?:$|[\[\]\+\-&\s\._,])"

        match = re.search(pattern, normalized_filename)
        if match:
            logging.debug(f"‚úÖ Terme '{term}' trouv√© dans '{normalized_filename}'")
        else:
            logging.debug(f"‚ùå Terme '{term}' NON trouv√© dans '{normalized_filename}'")
        return bool(match)

    # V√©rifier si un groupe de crit√®res correspond
    for search_group in SEARCH_TERMS:
        if all(match_criteria(term) for term in search_group):
            logging.info(f"üéØ √âpisode d√©tect√© : {filename} - Correspondance: {search_group}")
            return True

    logging.debug(f"üö´ Aucun crit√®re trouv√© pour {filename} (Compar√© avec {SEARCH_TERMS})")
    return False

def get_series():
    """ R√©cup√®re la liste des s√©ries suivies dans Sonarr """
    series_url = f"{SONARR_URL}/api/v3/series"
    response = requests.get(series_url, headers=HEADERS)
    
    if response.status_code != 200:
        logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des s√©ries : {response.status_code}")
        return []
    
    series_list = response.json()
    logging.info(f"üì• {len(series_list)} s√©ries r√©cup√©r√©es depuis Sonarr.")
    return series_list
    

def unmonitor_episode(episode):
    """ D√©sactive le monitoring d'un √©pisode dans Sonarr et v√©rifie l'√©tat apr√®s mise √† jour """
    episode_id = episode["id"]
    title = episode.get("title", "Titre inconnu")
    season = episode.get("seasonNumber", "?")
    episode_number = episode.get("episodeNumber", "?")

    logging.info(f"üõ†Ô∏è Traitement de l'√©pisode '{title}' (S{season}E{episode_number}, ID: {episode_id})...")

    if DRY_RUN:
        logging.info(f"[DRY_RUN] üöÄ L'√©pisode '{title}' (S{season}E{episode_number}, ID: {episode_id}) aurait √©t√© marqu√© comme NON MONITOR√â ‚úÖ")
        return

    url = f"{SONARR_URL}/api/v3/episode/{episode_id}"
    episode_data = {"monitored": False}

    max_retries = 5  # Nombre de tentatives en cas d'√©chec
    for attempt in range(max_retries):
        response = requests.put(url, headers=HEADERS, json=episode_data)

        if response.status_code == 200:
            logging.info(f"‚úÖ √âpisode '{title}' (S{season}E{episode_number}, ID: {episode_id}) marqu√© comme NON MONITOR√â avec succ√®s.")
            break
        elif response.status_code == 202:
            logging.warning(f"‚ö†Ô∏è Sonarr est lent √† traiter '{title}' (S{season}E{episode_number}, ID: {episode_id}). V√©rification apr√®s 3 secondes...")
            time.sleep(3)  # Pause avant de v√©rifier l'√©tat

            # V√©rifier si l'√©pisode a bien √©t√© mis √† jour
            check_response = requests.get(url, headers=HEADERS)
            if check_response.status_code == 200:
                updated_episode = check_response.json()
                if not updated_episode.get("monitored", True):  # Si monitored est bien pass√© √† False
                    logging.info(f"‚úÖ V√©rification OK : √âpisode '{title}' (S{season}E{episode_number}, ID: {episode_id}) est bien NON MONITOR√â apr√®s attente.")
                    break
            else:
                logging.warning(f"‚ö†Ô∏è Impossible de v√©rifier l'√©tat de '{title}' (S{season}E{episode_number}, ID: {episode_id}) apr√®s mise √† jour.")
        else:
            logging.error(f"‚ùå Erreur lors de la mise √† jour de l'√©pisode {episode_id}: {response.status_code} - {response.text}")
            break

    # Pause courte pour √©viter un trop grand nombre de requ√™tes simultan√©es
    time.sleep(1)



def main():
    """ Traite toutes les s√©ries et leurs √©pisodes dans Sonarr """
    logging.info("üöÄ D√©but du traitement des s√©ries dans Sonarr...")

    series_list = get_series()
    if not series_list:
        logging.warning("‚ö†Ô∏è Aucune s√©rie trouv√©e dans Sonarr.")
        return

    total_processed = 0  # Compteur d'√©pisodes d√©sactiv√©s
    dry_run_list = []  # Liste des √©pisodes qui auraient √©t√© d√©sactiv√©s

    for series in series_list:
        series_id = series.get("id")
        series_title = series.get("title", "Titre inconnu")

        logging.info(f"üîç Analyse des √©pisodes pour la s√©rie '{series_title}' (ID: {series_id})...")

        episodes = get_episodes(series_id)
        if not episodes:
            logging.warning(f"‚ö†Ô∏è Aucun √©pisode trouv√© pour la s√©rie '{series_title}' (ID: {series_id}).")
            continue

        for episode in episodes:
            has_file = "episodeFile" in episode and episode["episodeFile"] is not None
            if has_file:
                logging.debug(f"üìÑ Fichier d√©tect√© : {episode['episodeFile']['relativePath']}")
            else:
                logging.debug(f"üö´ Aucun fichier trouv√© pour l'√©pisode {episode['title']} (ID: {episode['id']})")
                continue

            if episode.get("monitored") and should_unmonitor(episode):
                logging.info(f"üì° Envoi requ√™te unmonitor pour l'√©pisode {episode['id']} ({episode['title']})...")
                unmonitor_episode(episode)
                total_processed += 1
                dry_run_list.append(f"{series_title} - {episode['title']} (S{episode['seasonNumber']}E{episode['episodeNumber']})")

    if DRY_RUN and dry_run_list:
        logging.info(f"[DRY_RUN] üìã √âpisodes qui auraient √©t√© d√©sactiv√©s ({len(dry_run_list)}):")
        for ep in dry_run_list:
            logging.info(f"  - {ep}")

    logging.info(f"‚úÖ Fin du traitement. {total_processed} √©pisodes ont √©t√© d√©sactiv√©s.")

    
if __name__ == "__main__":
    main()
