# -*- coding: utf-8 -*-

# -*- coding: utf-8 -*-
"""
#########################################################
# Media Management Tools (MMT) - Sonarr Unmonitor
# Auteur       : Nexius2
# Date         : 2025-02-18
# Version      : 1.0
# Description  : Script permettant de d√©sactiver le monitoring
#                des √©pisodes dans Sonarr en fonction des crit√®res
#                d√©finis dans `config.json`.
# Licence      : MIT
#########################################################

# üìå Utilisation :
# Ex√©cuter le script via la ligne de commande :
#   python sonarr_unmonitor.py
#
# Mode Simulation (Dry-Run) :
#   - D√©fini dans `config.json`, le mode Dry-Run affiche les √©pisodes
#     qui seraient d√©sactiv√©s sans les modifier r√©ellement.
#
# Mode Ex√©cution :
#   - Modifier "dry_run": false dans `config.json` pour que le script
#     applique r√©ellement les modifications.

# üîπ D√©pendances :
# - Python 3.x
# - Module `requests` (pip install requests)

# üîß Configuration :
# - V√©rifiez que `config.json` est bien rempli avec l'URL et la cl√© API.
# - Ajoutez ou modifiez les crit√®res de d√©sactivation selon vos besoins.

# üìù Journalisation :
# - Les logs sont enregistr√©s dans sonarr_unmonitor.log
# - Inclut les √©pisodes trait√©s, les erreurs et les mises √† jour effectu√©es.

#########################################################
"""


import requests
import json
import logging
from logging.handlers import RotatingFileHandler
import time
import re

# Charger la configuration
CONFIG_FILE = "config.json"

try:
    with open(CONFIG_FILE, "r", encoding="utf-8") as f:
        config = json.load(f)
except FileNotFoundError:
    print(f"‚ùå Erreur : fichier de configuration '{CONFIG_FILE}' introuvable.")
    exit(1)

# Extraire la configuration des services
SONARR_CONFIG = config["services"].get("sonarr", {})

# Extraire la configuration sp√©cifique √† Sonarr Unmonitor
UNMONITOR_CONFIG = config.get("sonarr_unmonitor", {})

LOG_FILE = UNMONITOR_CONFIG.get("log_file", "sonarr_unmonitor.log")
LOG_LEVEL = UNMONITOR_CONFIG.get("log_level", "INFO").upper()
DRY_RUN = UNMONITOR_CONFIG.get("dry_run", True)
SEARCH_TERMS = UNMONITOR_CONFIG.get("search_terms", [["1080", "FR", "MULTI"], ["4K", "FR", "MULTI"]])

# V√©rifier la configuration Sonarr
SONARR_URL = SONARR_CONFIG.get("url")
SONARR_API_KEY = SONARR_CONFIG.get("api_key")

if not SONARR_URL or not SONARR_API_KEY:
    print("‚ùå Configuration Sonarr manquante ou incompl√®te dans 'config.json'.")
    exit(1)

# Initialisation du logging avec rotation
log_formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")

file_handler = RotatingFileHandler(
    LOG_FILE, maxBytes=5 * 1024 * 1024, backupCount=5, encoding="utf-8"
)
file_handler.setFormatter(log_formatter)

console_handler = logging.StreamHandler()
console_handler.setFormatter(log_formatter)

logger = logging.getLogger()
logger.setLevel(getattr(logging, LOG_LEVEL, logging.INFO))
logger.handlers = []
logger.addHandler(file_handler)
logger.addHandler(console_handler)

logging.info("üìù Syst√®me de logs avec rotation activ√©.")

HEADERS = {"X-Api-Key": SONARR_API_KEY, "Content-Type": "application/json"}

def get_episodes():
    """ R√©cup√®re la liste des √©pisodes dans Sonarr avec leurs fichiers et filtre ceux qui sont monitor√©s """
    series_url = f"{SONARR_URL}/api/v3/series"
    response = requests.get(series_url, headers=HEADERS)

    if response.status_code != 200:
        logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des s√©ries : {response.status_code} - {response.text}")
        return []

    series_list = response.json()
    all_episodes = []

    for serie in series_list:
        series_id = serie["id"]
        episodes_url = f"{SONARR_URL}/api/v3/episode?seriesId={series_id}&includeEpisodeFile=true"
        response = requests.get(episodes_url, headers=HEADERS)

        if response.status_code == 200:
            episodes = response.json()
            logging.info(f"üì• {len(episodes)} √©pisodes r√©cup√©r√©s pour la s√©rie {serie['title']} (ID: {series_id}).")

            for ep in episodes:
                ep["seriesTitle"] = serie["title"]  # Ajout du titre de la s√©rie √† chaque √©pisode
                episode_id = ep.get("id")
                monitored = ep.get("monitored", False)  # V√©rifier si l'√©pisode est monitor√©
                episode_file = ep.get("episodeFile", {})

                # Si aucun fichier n'est trouv√©, tenter une requ√™te directe
                if not episode_file:
                    file_url = f"{SONARR_URL}/api/v3/episodeFile?episodeId={episode_id}"
                    file_response = requests.get(file_url, headers=HEADERS)

                    if file_response.status_code == 200:
                        episode_files = file_response.json()
                        if episode_files:
                            episode_file = episode_files[0]  # Prendre le premier fichier associ√©

                relative_path = episode_file.get("relativePath")

                # ‚úÖ Filtrage : Ne garder que les √©pisodes monitor√©s ET avec un fichier valide
                if monitored and relative_path:
                    relative_path = relative_path.lower()
                    logging.debug(f"‚úÖ √âpisode monitor√© avec fichier : {serie['title']} (ID: {series_id}) - {ep['title']} - {relative_path}")
                    ep["episodeFile"] = episode_file
                    all_episodes.append(ep)
                else:
                    logging.debug(f"üö´ Ignor√© (Non monitor√© ou pas de fichier) : {serie['title']} - {ep['title']} (ID: {episode_id})")

        else:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des √©pisodes pour la s√©rie {serie['title']} : {response.status_code} - {response.text}")

    logging.info(f"‚úÖ Total √©pisodes s√©lectionn√©s apr√®s filtrage : {len(all_episodes)}")
    return all_episodes







def should_unmonitor(episode):
    """ V√©rifie si un √©pisode doit √™tre d√©sactiv√© en fonction du nom du fichier """
    series_title = episode.get("seriesTitle", "S√©rie inconnue")
    episode_title = episode.get("title", "Titre inconnu")
    season_number = episode.get("seasonNumber", "Inconnu")
    episode_number = episode.get("episodeNumber", "Inconnu")
    episode_id = episode.get("id")
    episode_file = episode.get("episodeFile", {})

    # V√©rification si un fichier est attach√©
    if not episode_file or "relativePath" not in episode_file:
        logging.warning(f"üö´ AUCUN FICHIER trouv√© pour : {series_title} (S{season_number}E{episode_number}, ID: {episode_id})")
        return False

    # LOG POUR AFFICHER TOUS LES FICHIERS ANALYS√âS
    relative_path = episode_file["relativePath"].lower()
    logging.debug(f"üìù Analyse de l'√©pisode : {series_title} (S{season_number}E{episode_number}, ID: {episode_id}) - Fichier d√©tect√© : {relative_path}")

    # LOG POUR VOIR LES TERMES UTILIS√âS
    logging.debug(f"üîé Crit√®res de recherche utilis√©s : {SEARCH_TERMS}")

    # Fonction de d√©tection avanc√©e avec expressions r√©guli√®res
    def match_terms(path, terms):
        regex_patterns = {
            "1080": r"(?<!\\d)1080p(?!\\d)| 1080 ",
            "FR": r" fr |fr\\+|\\+fr",
            "EN": r" en |en\\+|\\+en"
        }
        return all(re.search(regex_patterns.get(term, rf"\\b{re.escape(term)}\\b"), path) for term in terms)

    # V√©rification des termes dans tous les ensembles de crit√®res
    for search_group in SEARCH_TERMS:
        if match_terms(relative_path, search_group):
            logging.info(f"üéØ √âpisode d√©tect√© : {series_title} (S{season_number}E{episode_number}, ID: {episode_id}) - Fichier: {relative_path} - Correspondance: {search_group}")
            return True

    logging.debug(f"‚ùå Aucun match trouv√© pour '{relative_path}' avec les crit√®res {SEARCH_TERMS}.")
    return False











def main():
    logging.info("üöÄ D√©but du traitement des √©pisodes dans Sonarr...")

    # Charger la limite de travail depuis la configuration
    WORK_LIMIT = UNMONITOR_CONFIG.get("work_limit", 0)

    episodes = get_episodes()
    if not episodes:
        logging.warning("‚ö†Ô∏è Aucun √©pisode trouv√© dans Sonarr.")
        return

    total_processed = 0
    dry_run_list = []  # Liste pour stocker les √©pisodes trait√©s en mode DRY_RUN

    for episode in episodes:
        title = episode.get("title", "Inconnu")
        season_number = episode.get("seasonNumber", "Inconnu")
        episode_number = episode.get("episodeNumber", "Inconnu")
        episode_id = episode.get("id")
        episode_file = episode.get("episodeFile", {})

        relative_path = episode_file.get("relativePath", "").lower()
        monitored = episode.get("monitored", False)

        # üîπ 1Ô∏è‚É£ Filtrer les √©pisodes non monitor√©s
        if not monitored and relative_path:
            logging.warning(f"üö´ IGNOR√â (Non monitor√©) : {series_title} (S{season_number}E{episode_number}, ID: {episode_id}) - {relative_path}")
            continue  # On passe au suivant

        # üîπ 2Ô∏è‚É£ V√©rifier si l'√©pisode doit √™tre unmonitor√©
        if should_unmonitor(episode):
            if WORK_LIMIT and total_processed >= WORK_LIMIT:
                logging.info(f"‚èπÔ∏è Limite de {WORK_LIMIT} √©pisodes atteinte, arr√™t imm√©diat du traitement.")
                break  

            logging.info(f"üéØ √Ä UNMONITORER : {series_title} (S{season_number}E{episode_number}, ID: {episode_id}) - {relative_path}")

            if DRY_RUN:
                logging.info(f"üö® [DRY_RUN] Cet √©pisode serait d√©sactiv√© : {series_title} (S{season_number}E{episode_number})")
                dry_run_list.append(f"{series_title} (S{season_number}E{episode_number})")
            else:
                unmonitor_episode(episode)

            # ‚úÖ Incr√©menter imm√©diatement apr√®s traitement
            total_processed += 1  

    # Affichage du r√©sum√© final
    if DRY_RUN and dry_run_list:
        logging.info(f"[DRY_RUN] üìã Liste des √©pisodes qui auraient √©t√© d√©sactiv√©s ({len(dry_run_list)}):")
        for episode in dry_run_list:
            logging.info(f" {series_title} - {episode} - {SEARCH_TERMS}")

    logging.info(f"‚úÖ Fin du traitement. {total_processed} √©pisodes ont √©t√© trait√©s (mode r√©el ou simulation).")





if __name__ == "__main__":
    main()
